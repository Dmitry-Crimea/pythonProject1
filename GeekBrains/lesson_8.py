########################################################################################################################
# 1. Реализовать класс «Дата», функция-конструктор которого должна принимать дату в виде строки формата «день-месяц-год»
# В рамках класса реализовать два метода. Первый, с декоратором @classmethod, должен извлекать число, месяц, год и
# преобразовывать их тип к типу «Число». Второй, с декоратором @staticmethod, должен проводить валидацию числа, месяца и
# года (например, месяц — от 1 до 12). Проверить работу полученной структуры на реальных данных.

import datetime

class Date:
    def __init__(self, date):
        self.date = str(date)

    @classmethod
    def int_date(cls, date):
        my_date = []
        my_date = [int(x) for x in date.split() if x!= '-']
        return my_date

    @staticmethod
    def validation(day, month, year):
        try:
            date_time = datetime.datetime(day, month, year)
            return f'Valid date'
        except ValueError:
            return f'Wrong date!'

print(Date.int_date('20 - 10 - 2022'))
print(Date.validation(2022,  11,  22))

########################################################################################################################

# 2. Создайте собственный класс-исключение, обрабатывающий ситуацию деления на ноль. Проверьте его работу на данных,
# вводимых пользователем. При вводе пользователем нуля в качестве делителя программа должна корректно обработать эту
# ситуацию и не завершиться с ошибкой.

class DevissonByZerro:

    @staticmethod
    def _devidebyzerro(digit_1, digit_2):
        try:
            return digit_1 / digit_2
        except ZeroDivisionError:
            return f'DevizionByZerro!!!'

try:
    user_input_1 = float(input("Input digit 1: "))
    user_input_2 = float(input("Input digit 2: "))
except ValueError:
    print("Type a digit!!!")

print(DevissonByZerro._devidebyzerro(user_input_1, user_input_2))

########################################################################################################################
# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список только
# числами. Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу
# скрипта, введя, например, команду “stop”. При этом скрипт завершается, сформированный список с числами выводится на
# экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки. При вводе пользователем
# очередного элемента необходимо реализовать проверку типа элемента и вносить его в список, только если введено число.
# Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.
#
class Exception:
    pass